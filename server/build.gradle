
apply plugin: 'java'
apply plugin: 'eclipse'



sourceCompatibility = 1.7
version = '1.0'
jar {
	manifest {
		attributes 'Implementation-Title': 'Integer-server', 'Implementation-Version': version
	}

}

configurations {
	provided
}

repositories {
	mavenCentral()
	maven { url "http://repo.spring.io/libs-milestone" }
	maven { url "https://repository.jboss.org" }
	maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
	maven { url "http://repo1.maven.org/maven2/com/fasterxml/jackson/" }
	maven { url "http://oss.sonatype.org/content/groups/public/" }
	maven { url "https://oosnmp.net/dist/release" }
}

dependencies {

	compile project(':common')

	compile files("libs/grammatica-1.5.jar")
	compile files("libs/mibble-parser-2.9.3.jar")

	compile 'javax.validation:validation-api:${javaxValidationVersion}'
	compile group: 'commons-collections', name: 'commons-collections', version: '${commonsCollectionVersion}'
	compile group: 'org.hibernate', name: 'hibernate-core', version: '${hibernateCoreVersion}'
	compile "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:${jbossEJBApiSpecVersion}"
	compile "javax.ws.rs:javax.ws.rs-api:${javaxWsRsApiVersion}"
	compile "javax.inject:javax.inject-tck:${javaxInjectVersion}"
	compile "javax.enterprise:cdi-api:${javaxEnterpriseCdiApiVersion}"
	compile "org.slf4j:slf4j-log4j12:${slf4jLog4jVersion}"
	compile "org.snmp4j:snmp4j:${snmp4jVersion}"
	compile "commons-net:commons-net:${commonsNetVersion}"
	compile "com.fasterxml.jackson.core:jackson-core:${jaxsonVersion}"
	compile "com.fasterxml.jackson.core:jackson-annotations:${jaxsonVersion}"
	compile "com.fasterxml.jackson.core:jackson-databind:${jaxsonVersion}"
	compile "org.yaml:snakeyaml:1.13"
	
	
	testCompile "org.jboss.arquillian.junit:arquillian-junit-container:${junitArquillianVersion}"
	testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:${junitArquillianVersion}"
	//testCompile "org.jboss.arquillian.protocol:arquillian-container-osgi:1.0.2"
	testCompile group: 'junit', name: 'junit', version: '${junitVersion}'
	testCompile group: 'org.hibernate', name: 'hibernate-core', version: '${hibernateCoreVersion}'

	testRuntime ('org.wildfly:wildfly-arquillian-container-managed:8.1.0.Final') {
		exclude module: 'wildfly-ee'
		exclude module: 'wildfly-server'
		exclude module: 'wildfly-osgi-service'
		exclude module: 'wildfly-jmx'
		exclude module: 'wildfly-arquillian-protocol-jmx'
		exclude module: 'wildfly-arquillian-testenricher-msc'
		exclude module: 'arquillian-testenricher-osgi'
		exclude group: 'org.jboss.shrinkwrap.resolver'
	}

	testRuntime('org.jboss:jboss-remote-naming:2.0.1.Final')
	testRuntime ("org.jboss:jboss-common-core:${jbossCommonCoreVersion}") {
		exclude group: 'org.jboss.logging'
	}

}

test {
	maxHeapSize = '2048m'
	jvmArgs "-XX:MaxPermSize=512m"

	
	testLogging {
		// Show that tests are run in the command-line output
		events 'started', 'passed'
	}
}

task deployWildfly() << {
	println "Deploy Wildfly modules to " +  "$System.env.JBOSS_HOME/"
	copy {
		from "src/wildfly"
		into "$System.env.JBOSS_HOME"
	}
	
	
	copy {
		from "config"
		into "$System.env.JBOSS_HOME" + '/standalone/data/yaml'
	}
}


task loadDefaultData(type:Exec) {
	// on linux
	commandLine '../database/bin/load_Core_server_config.sh', 'Core'
}

configurations {
	sql
}
dependencies {
	sql 'mysql:mysql-connector-java:5.1.16'
}


URLClassLoader loader = GroovyObject.class.classLoader
configurations.sql.each {File file ->
	loader.addURL(file.toURI().toURL())
}

task createSchema(dependsOn: test) << {
	configurations.sql {
		println 'Connecting to database ...'
		def sql = groovy.sql.Sql.newInstance('jdbc:mysql://localhost:3306/TestConfig', 'dbUser', 'dbPassword', 'com.mysql.jdbc.Driver' )
		
		println 'Querying database tables ...'
		
		def outFile = new FileWriter("build/create_table.sql") 
		outFile.write("-- Integer Config schema\n")
		outFile.write("-- Created " + new Date() + "\n\n")
		
		outFile.write("use Config;\n\n")
		
		outFile.write("set FOREIGN_KEY_CHECKS=0;\n\n")
		sql.eachRow('show tables') { 
			row -> sql.eachRow("show create table " + "${row.Tables_in_TestConfig}") { 
				tbl -> 
				outFile.write("drop table if exists ${tbl.Table};\n")
				outFile.write("${tbl.'Create Table'};\n\n")
				
				}
			
		}
		outFile.write("set FOREIGN_KEY_CHECKS=1;\n")
		outFile.close()
	}
}


