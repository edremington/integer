---

# Entity technology definition for Integer
# by Loren Jan Wilson, 2014-05-09

technologies:
    # This is a generalized version of the entity information returned by
    # things like ENTITY-MIB and the Juniper Chassis MIBs. We implement this
    # the same way that ENTITY-MIB does, where each piece of hardware is the
    # same as any other, and each can have parent-child relations as well as a
    # relation to an interface component.
    #
    # Two pieces of data in ENTITY-MIB are being ignored here at this time..
    # one is the possibility for multiple-parenting relationships as expressed
    # by the entPhysicalContainsTable, which we don't look at. This means we
    # won't see, for example, both slots that a double-wide line card is
    # plugged into.
    #
    # The other thing we're ignoring at the moment is the entLogicalTable. So
    # we won't collect logical devices this way, only physical hardware
    # components. This also means that if a physical component is only
    # connected to the ifTable via the creation of logical devices, we won't
    # see those relations.

    - name: entity
      provides: [ entity ]
      description: > 
          Hardware associated with this device, including chassis, slots,
          linecards, ports, optics, etc.
      components:
          # Each piece of physical hardware is a component, the same as any
          # other. The relations we build between those components define the
          # physical structure of the hardware.

          - name: entity-physical
            parent: null
            index: [ entity-physical-index ]
            description: One physical piece of hardware.
            capabilities:
                - name: entity-physical-index
                  description: A unique index for this physical component.

                - name: entity-physical-description
                  description: > 
                      A text description of this component, irrespective of its
                      particular role in this system. (Cisco doesn't implement
                      this correctly, so there's going to be some role-specific
                      information in these strings, such as "slot 3".)

                - name: entity-physical-name
                  description: > 
                      A text description of this component and its system role.
                      The intent here is that this name could be used for
                      console commands where applicable (e.g. "Gi1/3").

                - name: entity-physical-class
                  description: >
                      The general hardware type of this component. This is an
                      integer pointing at a "physicalClass" data type in the
                      ENTITY-MIB.

                - name: entity-physical-manufacturer
                  description: > 
                      The maker of this piece of hardware. Note: just because a
                      vendor string is not the same does not mean that the
                      vendor is actually different... e.g. "Cisco Systems" vs.
                      "Cisco" vs. "Cisco Systems, Inc.". I'm not sure whether
                      we should provide a way for users to normalize these
                      values.

                - name: entity-physical-model
                  description: Model name of this component.

                - name: entity-physical-serialNumber
                  description: Serial number of this component.

                - name: entity-physical-hardwareRevision
                  description: The hardware revision of this component.

                - name: entity-physical-firmwareRevision
                  description: The firmware revision of this component.

                - name: entity-physical-softwareRevision
                  description: > 
                      The software revision running on this component. For a
                      Cisco device, this will often just be equal to the
                      running IOS version, but other vendors such as Brocade
                      support more complex scenarios, such as local linecard
                      software which must be upgraded separately from the
                      device's general software.

                - name: entity-physical-parent
                  description: > 
                      The entity-physical-index for the component we're
                      contained in, if applicable.

                - name: entity-physical-parentRelativePosition
                  description: > 
                      The position of this child component relative to other
                      children of the same parent. (e.g. "1" for the first port
                      on a given linecard, etc)

                - name: entity-physical-fru
                  description: Is this part physically replaceable?

                - name: entity-physical-interfaceIndex
                  description: > 
                      This part can map to an interface in the interface table.

relations:
    # The entity-physical-parent attribute points to another entity-physical.
    - name: entity-physical-to-parent
      description: An entity can point to another entity as its own "parent".
      type: containment
      components:
          source: entity-physical
          destination: entity-physical
      capabilities:
          - source: entity-physical-parent
            destination: entity-physical-index
    # The entity-physical-interfaceIndex attribute points to an interface by
    # interface-index.

    - name: entity-physical-to-interface
      description: A physical part can map to an interface in the interface table.
      type: equality
      components:
          source: entity-physical
          destination: interface
      capabilities:
          - source: entity-physical-interfaceIndex
            destination: interface-index

...

